installCRDs: true

networkPolicy:
  create: false  # managed separately if needed

controller:
  replicas: 2
  resources:
    requests:
      cpu: 250m
      memory: 512Mi
    limits:
      cpu: 1000m
      memory: 1Gi
  metrics:
    enabled: true
  priorityClassName: system-cluster-critical

server:
  replicas: 2
  extraArgs:
    - --port=8080
    - --metrics-port=8083
    - --insecure  # for internal use, remove in production
  service:
    type: ClusterIP
    servicePortHttp: 80
    servicePortHttps: 443
    targetPortHttp: 8080
    targetPortHttps: 8080
  ingress:
    enabled: true
    ingressClassName: nginx
    hosts:
      - argocd.example.com
    annotations:
      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    tls:
      - hosts:
          - argocd.example.com
        secretName: argocd-tls
  livenessProbe:
    httpGet:
      path: /healthz?full=true
      port: 8080
  readinessProbe:
    httpGet:
      path: /healthz
      port: 8080
  metrics:
    enabled: true
  resources:
    requests:
      cpu: 250m
      memory: 512Mi
    limits:
      cpu: 1000m
      memory: 1Gi

repoServer:
  replicas: 2
  metrics:
    enabled: true
  priorityClassName: system-cluster-critical
  resources:
    requests:
      cpu: 200m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 512Mi

applicationSet:
  replicaCount: 1
  metrics:
    enabled: true
  priorityClassName: system-cluster-critical

dex:
  enabled: false

notifications:
  enabled: true
  metrics:
    enabled: true

redis:
  auth:
    enabled: false  # disable to avoid secret issues
  metrics:
    enabled: true

configs:
  params:
    server.insecure: true
    applicationsetcontroller.enable.progressive.syncs: "true"
  cm:
    application.instanceLabelKey: argocd.argoproj.io/instance
    exec.enabled: "true"
    kustomize.buildOptions: --enable-helm
    timeout.reconciliation: 60s
    resource.exclusions: |
      - apiGroups:
          - "metrics.k8s.io"
        kinds:
          - "PodMetrics"
        clusters:
          - "*"
  rbac:
    policy.default: role:readonly
    policy.csv: |
      g, admin@example.com, role:admin
      g, devops@example.com, role:edit
  secret:
    argocdServerAdminPassword: $2b$12$oKokPM7N8GEWQALP0J.Hhe6nUdxIo4nItFuGtqlUr3jpld5OkWQn6
    extra:
      # add vault/gpg/git secrets here if needed

prometheus:
  serviceMonitor:
    enabled: true
    additionalLabels:
      release: prometheus

tolerations:
  - key: "node-role.kubernetes.io/control-plane"
    operator: "Exists"
    effect: "NoSchedule"
  - operator: "Exists"

nodeSelector:
  kubernetes.io/os: linux
